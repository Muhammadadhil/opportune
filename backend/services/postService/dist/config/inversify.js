"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const user_services_1 = require("../services/implementation/user.services");
const user_repository_1 = require("../repositories/implementation/user.repository");
const user_schema_1 = require("../schema/user.schema");
const UserConsumer_1 = require("../events/rabbitmq/consumers/UserConsumer");
const types_1 = require("../types/types");
const job_services_1 = require("../services/implementation/job.services");
const job_repositoty_1 = require("../repositories/implementation/job.repositoty");
const job_controller_1 = require("../controllers/implementation/job.controller");
const gig_controller_1 = require("../controllers/implementation/gig.controller");
const gig_services_1 = require("../services/implementation/gig.services");
const gig_repository_1 = require("../repositories/implementation/gig.repository");
const Producer_1 = require("../events/rabbitmq/producer/Producer");
const portfolio_controller_1 = require("../controllers/implementation/portfolio.controller");
const portfolio_services_1 = require("../services/implementation/portfolio.services");
const PortfolioRepository_1 = require("../repositories/implementation/PortfolioRepository");
const container = new inversify_1.Container();
container.bind(types_1.TYPES.RabbitMQProducer).to(Producer_1.RabbitMQProducer).inSingletonScope();
container.bind(types_1.TYPES.IUserService).to(user_services_1.UserService);
container.bind(types_1.TYPES.IUserRepository).to(user_repository_1.UserRepository);
container.bind("UserModel").toConstantValue(user_schema_1.User);
container.bind(types_1.TYPES.IUserConsumer).to(UserConsumer_1.UserConsumer);
container.bind(types_1.TYPES.IJobService).to(job_services_1.JobService);
container.bind(types_1.TYPES.IJobRepository).to(job_repositoty_1.JobRepository);
container.bind(types_1.TYPES.IJobController).to(job_controller_1.JobController);
container.bind(types_1.TYPES.IGigController).to(gig_controller_1.GigController);
container.bind(types_1.TYPES.IGigService).to(gig_services_1.GigService);
container.bind(types_1.TYPES.IGigRepository).to(gig_repository_1.GigRepository);
container.bind(types_1.TYPES.IPortFolioController).to(portfolio_controller_1.PorfolioController);
container.bind(types_1.TYPES.IPortfolioService).to(portfolio_services_1.PortfolioService);
container.bind(types_1.TYPES.IPortfolioRepository).to(PortfolioRepository_1.PortfolioRepository);
exports.default = container;
